/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package WebServices;

import EJBFacade.AccountFacadeLocal;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author luisnegrete
 */
@javax.ejb.Stateless
@javax.ws.rs.Path("/account")
public class AccountREST {
    
    @javax.ejb.EJB
    private AccountFacadeLocal accountFacade;
    
    @javax.ejb.EJB
    private EJBFacade.PhoneFacadeLocal _phoneFacade;
    
    @javax.ejb.EJB
    private EJBFacade.PhoneFacadeLocal _phonecodeFacade;
    
    @GET
    @Path("{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response find(@PathParam("id") String id) {
    
        JSONObject obj = new JSONObject();
        
    try{
        
        obj.put("status", "ok");
        
        model.Account account = this.accountFacade.find(id);
        
        if(account != null){
        
            JSONObject result = new JSONObject();
            
            result.put("email", account.getEmail());
            
            result.put("birthdate", account.getBirthdate());
            
            result.put("name", account.getName());
            
            result.put("phone", account.getPhoneNumber());
            
            result.put("discounts", account.getDiscounts());
            
            result.put("travel_information", account.getTripNotifications());
            
            result.put("phone_code", account.getPhoneCode().getCode());
            
            result.put("phone_code_country", account.getPhoneCode().getCountry().getName());
            
            JSONArray array = new JSONArray();
            
            for(model.Role role: account.getRoleCollection()){
            
                JSONObject aux = new JSONObject();
                
                aux.put("role",role.getRoleName());
                
                array.put(aux);
            
            }
            
            result.put("roles", array);
            
            obj.put("result", result);
        
        }
        
        else{
        
            obj.put("status", "not found");
        
        }
        
        return Response.status(200).entity(obj.toString()).build();
     
    }
    catch(NullPointerException ex){
    
        obj.put("status", "error");
        
        return Response.status(200).entity(obj.toString()).build();
    
    }
    
    }
    
    @javax.ws.rs.POST
    @Consumes(MediaType.APPLICATION_JSON)
    public Response Registrate(String user){
    
        JSONObject input = new JSONObject(user);
        
        model.Account account = new model.Account();
        if(input.getString("name") != null){
        account.setName(input.getString("name"));
        }
        account.setPassword(input.getString("password"));
        
        if(input.getString("phone")!=null){
        
        account.setPhoneNumber(input.getString("phone"));
        //Set phonecode
        account.setPhoneId(this._phoneFacade.findPhonecode(input.getInt("phonecodeId")));
        
        }
        
        //New Functionality added
        account.setPushNotifications(input.getBoolean("push-notifications"));
        
        account.setDiscounts(input.getBoolean("discounts"));
        
        account.setTripNotifications(input.getBoolean("trip-notifications"));
       
        if(input.getString("birthdate") != null){
        account.setBirthdate(new java.util.Date(input.getString("birthdate")));
        }
        account.setEmail(input.getString("email"));
        
        JSONObject obj = new JSONObject();
        
        try{
        
        enumeration.TransactionResult result = this.accountFacade.Registration(account);
        
        switch(result){
        
            case SUCCESS:
                obj.put("status", "success");
              break;
              
            case TRANSACTIONERROR:
                obj.put("status","error");
                break;
                
                
        
        }
        
        return Response.status(200).entity(obj.toString()).build();
     
        }
        catch (Exception ex){
        
            obj.put("status","error");
            
            return Response.status(200).entity(obj.toString()).build();
     
        
        }
    
    }
    
    @GET
    @javax.ws.rs.Path("/login/{username}/{password}")
    public Response Login(@javax.ws.rs.PathParam("username") String username, @javax.ws.rs.PathParam("password")String password){
        
        JSONObject obj = new JSONObject();
      
        try{
        
            model.Account account = this.accountFacade.find(username);
            
            if(account != null){
            
                if(account.getPassword().equals(password)){
                
                    obj.put("status", "success");
                
                }else{
                
                    obj.put("status", "login failed");
                
                }
            
            }
            else{
            
                obj.put("status", "user not found");
                
            }
            
           return Response.status(200).entity(obj.toString()).build(); 
        }
        catch(Exception ex){
        
           obj.put("status", "error");
           
           return Response.status(200).entity(obj.toString()).build();
        
        }
    
    }
    
}
